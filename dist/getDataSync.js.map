{"version":3,"sources":["../src/getDataSync.js"],"names":["projectId","offset","retrivedData","total","console","log","Promise","resolve","reject","getData","id","ofset","axios","get","headers","data","length","pagination","newData","getAllStoriesArray","require","performance","iterateOverAllStories","storyId","retries","client","project","story","error","code","getCommentsOfstory","comments","all","donwloadFile","attachment","storyDir","t0","now","filename","trim","replace","download","t1","createPDF","storyData","doc","PDFDocument","pipe","fs","createWriteStream","fontSize","text","owner","moveDown","name","description","addPage","i","commentBy","imagePath","j","image","width","end","totalStoriesDone","totalStoriesAvailable","toFixed","extractAllData","projects","remainingStories","getAllStoriesArraySync","iterateOverAllStoriesSync","getCommentsOfstorySync","donwloadFileSync","pro","stories","includes","undefined","baseDir","projectDir","mkdirSync","recursive","storyJson","writeFileSync","members","ownedById","username","k","comment","personId","email","fileAttachments","l","res","contentType","indexOf","push","getprojects","getAllPivotTrackerData","account","memberships","forEach","member"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;sFASA,kBAAkCA,SAAlC;AAAA,QAA6CC,MAA7C,uEAAoD,CAApD;AAAA,QAAuDC,YAAvD,uEAAoE,EAApE;AAAA,QAAwEC,KAAxE,uEAA8E,CAA9E;AAAA;AAAA;AAAA;AAAA;AACEC,oBAAQC,GAAR,iBAA0BJ,MAA1B;AADF,8CAES,IAAIK,iBAAJ;AAAA,mGAAY,kBAAgBC,OAAhB,EAAwBC,MAAxB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEMC,+BAZW;AAAA,+GAYD,iBAAOC,EAAP,EAAWC,KAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEcC,gBAAMC,GAAN,0DAAiEH,EAAjE,kCAAgGC,KAAhG,qBAAuH,EAAEG,SAAS,EAAE,kBAAkB,kCAApB,EAAX,EAAvH,CAFd;;AAAA;AAAA;AAEFC,wCAFE,SAEFA,IAFE;;AAGVX,4CAAQC,GAAR,CAAY,kBAAZ,EAAgCU,KAAKA,IAAL,CAAUC,MAA1C;AAHU,qEAIHD,KAAKA,IAJF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAZC;;AAAA,0CAYXN,OAZW;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAuBSG,gBAAMC,GAAN,0DAAiEb,SAAjE,kCAAuGC,MAAvG,qBAA+H,EAAEa,SAAS,EAAE,kBAAkB,kCAApB,EAAX,EAA/H,CAvBT;;AAAA;AAAA;AAuBPC,4BAvBO,SAuBPA,IAvBO;;AAwBfb,kFAAmBA,YAAnB,oCAAoCa,KAAKA,IAAzC;AACAZ,gCAAQY,KAAKE,UAAL,CAAgBd,KAAxB;;AAzBe,8BA2BVA,UAAUD,aAAac,MA3Bb;AAAA;AAAA;AAAA;;AAAA;AAAA,8BA4BLb,UAAUD,aAAac,MA5BlB;AAAA;AAAA;AAAA;;AA6BTf,iCAASA,SAAS,GAAlB;AACA;AA9BS;AAAA,+BA+BWQ,QAAQT,SAAR,EAAmBC,MAAnB,CA/BX;;AAAA;AA+BLiB,+BA/BK;;AAgCT;AACAhB,kFAAmBA,YAAnB,oCAAoCgB,OAApC;AACAd,gCAAQC,GAAR,wBAAiCH,aAAac,MAA9C;AAlCS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAqCXZ,gCAAQC,GAAR,0BAAmCH,aAAac,MAAhD;AACAT,gCAAQL,YAAR;;AAtCW;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA0CfM;;AA1Ce;AA4ChBD,gCAAQL,YAAR;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;;;AAtDiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeiB,kB;;;;;AATf;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;eAEyBC,QAAQ,YAAR,C;IAAhBC,W,YAAAA,W;;AAkET,SAASC,qBAAT,CAA+BtB,SAA/B,EAA0CuB,OAA1C,EAA6D;AAAA,MAAVC,OAAU,uEAAF,CAAE;;AAC3D,SAAO,IAAIlB,iBAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACrCiB,kBAAOC,OAAP,CAAe1B,SAAf,EAA0B2B,KAA1B,CAAgCJ,OAAhC,EAAyCV,GAAzC,CAA6C,UAASe,KAAT,EAAgBD,KAAhB,EAAuB;AAClE,UAAGC,UAAUA,MAAMC,IAAN,KAAe,WAAf,IAA8BD,MAAMC,IAAN,KAAe,YAAvD,KAAwEL,UAAU,CAArF,EAAuF;AACrFF,8BAAsBtB,SAAtB,EAAiCuB,OAAjC,EAA0CC,UAAQ,CAAlD;AACD,OAFD,MAEM,IAAG,CAACI,KAAJ,EAAU;AACdrB,gBAAQoB,KAAR;AACD,OAFK,MAGF;AACFnB,eAAOoB,KAAP;AACD;AACJ,KATC;AAUD,GAXM,CAAP;AAYD;;AAED,SAASE,kBAAT,CAA4B9B,SAA5B,EAAuCuB,OAAvC,EAA0D;AAAA,MAAVC,OAAU,uEAAF,CAAE;;AACxD,SAAO,IAAIlB,iBAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACrCiB,kBAAOC,OAAP,CAAe1B,SAAf,EAA0B2B,KAA1B,CAAgCJ,OAAhC,EAAyCQ,QAAzC,CAAkDC,GAAlD,CAAsD,UAASJ,KAAT,EAAgBG,QAAhB,EAA0B;AAC9E,UAAGH,UAAUA,MAAMC,IAAN,KAAe,WAAf,IAA8BD,MAAMC,IAAN,KAAe,YAAvD,KAAwEL,UAAU,CAArF,EAAuF;AACrFM,2BAAmB9B,SAAnB,EAA8BuB,OAA9B,EAAuCC,UAAQ,CAA/C;AACD,OAFD,MAEM,IAAG,CAACI,KAAJ,EAAU;AACdrB,gBAAQwB,QAAR;AACD,OAFK,MAGF;AACFvB,eAAOoB,KAAP;AACD;AACJ,KATC;AAUD,GAXM,CAAP;AAYD;;AAED,SAASK,YAAT,CAAsBC,UAAtB,EAAkCC,QAAlC,EAAuD;AAAA,MAAXX,OAAW,uEAAH,CAAG;;AACrDpB,UAAQC,GAAR,CAAY,kBAAZ;AACA,MAAI+B,KAAKf,YAAYgB,GAAZ,EAAT;AACA,SAAO,IAAI/B,iBAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACrC,QAAI8B,WAAWJ,WAAWI,QAAX,CAAoBC,IAApB,GAA2BC,OAA3B,CAAmC,IAAnC,EAAwC,GAAxC,CAAf;AACAf,kBAAOS,UAAP,CAAkBA,WAAWxB,EAA7B,EAAiC+B,QAAjC,CAA6CN,QAA7C,SAAyDG,QAAzD,EAAqE,UAASV,KAAT,EAAgB;AACnF,UAAIA,SAASJ,UAAU,CAAvB,EAA0B;AACxBS,qBAAaC,UAAb,EAAyBC,QAAzB,EAAoCX,UAAQ,CAA5C;AACD,OAFD,MAEO,IAAG,CAACI,KAAJ,EAAW;AACdxB,gBAAQC,GAAR,yBAAkC8B,QAAlC,SAA8CD,WAAWI,QAAzD;AACA,YAAII,KAAKrB,YAAYgB,GAAZ,EAAT;AACAjC,gBAAQC,GAAR,iCAA0C,CAACqC,KAAKN,EAAN,IAAY,IAAtD;AACA7B,gBAAW4B,QAAX,SAAuBG,QAAvB;AACH,OALM,MAKD;AACJ9B,eAAOoB,KAAP;AACD;AACF,KAXD;AAYD,GAdM,CAAP;AAeD;;AAED,SAASe,SAAT,CAAmBL,QAAnB,EAA6BM,SAA7B,EAAuC;AACrC,MAAMC,MAAM,IAAIC,gBAAJ,EAAZ;AACAD,MAAIE,IAAJ,CAASC,aAAGC,iBAAH,CAAqBX,QAArB,CAAT;;AAEAO,MACCK,QADD,CACU,EADV,EAECC,IAFD,eAEkBP,UAAUjB,KAAV,CAAgBjB,EAFlC,gBAE+CkC,UAAUQ,KAFzD,uBAEgFR,UAAUjB,KAAV,CAAgB3B,SAFhG;;AAIA6C,MAAIQ,QAAJ;AACAR,MACCK,QADD,CACU,EADV,EAECC,IAFD,CAEMP,UAAUjB,KAAV,CAAgB2B,IAFtB;;AAIAT,MAAIQ,QAAJ;AACAR,MACCK,QADD,CACU,EADV,EAECC,IAFD,sBAEyBP,UAAUjB,KAAV,CAAgB4B,WAFzC;;AAIA,MAAGX,UAAUb,QAAV,CAAmBf,MAAnB,GAA4B,CAA/B,EAAiC;AAC/B6B,QACGW,OADH,GAEGN,QAFH,CAEY,EAFZ,EAGGC,IAHH,eAGoBP,UAAUjB,KAAV,CAAgBjB,EAHpC;;AAKE,SAAI,IAAI+C,IAAE,CAAV,EAAaA,IAAEb,UAAUb,QAAV,CAAmBf,MAAlC,EAA0CyC,GAA1C,EAA+C;AAC7CZ,UAAIQ,QAAJ;AACAR,UACCK,QADD,CACU,EADV,EAECC,IAFD,CAESP,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBC,SAF/B,YAE+Cd,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBN,IAFrE;;AAIA,UAAGP,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBE,SAAtB,CAAgC3C,MAAhC,GAAyC,CAA5C,EAA8C;AAC5C,aAAI,IAAI4C,IAAE,CAAV,EAAaA,IAAEhB,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBE,SAAtB,CAAgC3C,MAA/C,EAAuD4C,GAAvD,EAA2D;AAC1D,cAAI;AACHf,gBAAIQ,QAAJ;AACAR,gBAAIgB,KAAJ,CAAUjB,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBE,SAAtB,CAAgCC,CAAhC,CAAV,EAA6C,EAACE,OAAO,GAAR,EAA7C;AACA1D,oBAAQC,GAAR,sBAA+BuC,UAAUjB,KAAV,CAAgBjB,EAA/C;AACAN,oBAAQC,GAAR,CAAYuC,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBE,SAAtB,CAAgCC,CAAhC,CAAZ;AACA,WALD,CAKE,OAAOhC,KAAP,EAAc;AACfxB,oBAAQC,GAAR,CAAY,sBAAZ;AACAD,oBAAQC,GAAR,CAAYuC,UAAUb,QAAV,CAAmB0B,CAAnB,EAAsBE,SAAtB,CAAgCC,CAAhC,CAAZ;AACA;AACD;AACF;AACF;AACJ;AACDf,MAAIkB,GAAJ;AACA3D,UAAQC,GAAR,qBAA+B,CAAC,MAAM2D,gBAAN,GAAyBC,qBAA1B,EAAiDC,OAAjD,CAAyD,CAAzD,CAA/B,iDAAsID,qBAAtI;AACD;;AAED,IAAIA,wBAAwB,CAA5B;AACA,IAAID,mBAAmB,CAAvB;AACA,SAASG,cAAT,CAAwBC,QAAxB,EAAkCC,gBAAlC,EAAmD;AACjDjE,UAAQC,GAAR,CAAY,oBAAZ,EAAiC+D,SAASpD,MAA1C;;AAEA,MAAMsD,yBAAyB,mCAAGnD,kBAAH,CAA/B;AACA,MAAMoD,4BAA4B,mCAAGjD,qBAAH,CAAlC;AACA,MAAMkD,yBAAyB,mCAAG1C,kBAAH,CAA/B;AACA,MAAM2C,mBAAmB,mCAAGxC,YAAH,CAAzB;;AAEA,OAAI,IAAIwB,IAAE,CAAV,EAAaA,IAAEW,SAASpD,MAAxB,EAAgCyC,GAAhC,EAAoC;AAClC,QAAIiB,MAAMN,SAASX,CAAT,EAAY/C,EAAtB;AACA,QAAIgE,QAAM,OAAV,EAAkB;;AAEhB,UAAMC,UAAUL,uBAAuBF,SAASX,CAAT,EAAY/C,EAAnC,CAAhB;AACEN,cAAQC,GAAR,cAAuB+D,SAASX,CAAT,EAAY/C,EAAnC,aAA6CiE,QAAQ3D,MAArD;AACAiD,8BAAwBA,wBAAwBU,QAAQ3D,MAAxD;AACA,WAAI,IAAI4C,IAAE,CAAV,EAAaA,IAAEe,QAAQ3D,MAAvB,EAA+B4C,GAA/B,EAAmC;AACjC,YAAG,CAACS,iBAAiBO,QAAjB,CAA0BD,QAAQf,CAAR,EAAWlD,EAArC,CAAJ,EAA6C;;AAE3C,cAAMiB,QAAQ4C,0BAA0BH,SAASX,CAAT,EAAY/C,EAAtC,EAA0CiE,QAAQf,CAAR,EAAWlD,EAArD,CAAd;;AAEI,cAAGiB,SAASA,MAAMjB,EAAN,KAAa,IAAtB,IAA8BiB,MAAMjB,EAAN,KAAamE,SAA9C,EAAwD;AACtDb;;AAEA,gBAAMjC,WAAWyC,uBAAuBJ,SAASX,CAAT,EAAY/C,EAAnC,EAAuCiB,MAAMjB,EAA7C,CAAjB;;AAEC,gBAAIkC,YAAY,EAAhB;AACAA,sBAAUjB,KAAV,GAAkBA,KAAlB;AACAiB,sBAAUb,QAAV,GAAqB,EAArB;AACA,gBAAI+C,UAAU,mBAAd;AACA,gBAAIC,aAAgBD,OAAhB,SAA2BV,SAASX,CAAT,EAAY/C,EAAvC,SAA6C0D,SAASX,CAAT,EAAYH,IAA7D;AACA,gBAAInB,WAAc4C,UAAd,SAA4BpD,MAAMjB,EAAtC;AACAsC,yBAAGgC,SAAH,CAAaD,UAAb,EAAyB,EAAEE,WAAW,IAAb,EAAzB;AACAjC,yBAAGgC,SAAH,CAAa7C,QAAb,EAAuB,EAAE8C,WAAW,IAAb,EAAvB;AACA,gBAAI3C,WAAcH,QAAd,SAA0BR,MAAMjB,EAAhC,eAAJ;AACA,gBAAIwE,YAAe/C,QAAf,SAA2BR,MAAMjB,EAAjC,UAAJ;;AAEAsC,yBAAGmC,aAAH,CAAiBD,SAAjB,EAA4B,yBAAevD,KAAf,CAA5B;;AAEAiB,sBAAU,OAAV,IAAqBwC,QAAQzD,MAAM0D,SAAd,IAA2BD,QAAQzD,MAAM0D,SAAd,EAAyBC,QAApD,GAA+D,SAApF;AACC,gBAAGvD,SAASf,MAAT,GAAkB,CAArB,EAAuB;;AAErB,mBAAI,IAAIuE,IAAE,CAAV,EAAaA,IAAExD,SAASf,MAAxB,EAAgCuE,GAAhC,EAAoC;AAClC,oBAAIC,UAAQ,EAAZ;AACAA,wBAAQ,MAAR,IAAkBzD,SAASwD,CAAT,EAAYpC,IAA9B;AACAqC,wBAAQ,SAAR,IAAqBzD,SAASwD,CAAT,EAAYhE,OAAjC;AACAiE,wBAAQ,WAAR,IAAuB,EAAvB;AACAA,wBAAQ,WAAR,IAAuBJ,QAAQrD,SAASwD,CAAT,EAAYE,QAApB,IAAgCL,QAAQrD,SAASwD,CAAT,EAAYE,QAApB,EAA8BH,QAA9D,GAAyE,SAAhG;AACAE,wBAAQ,OAAR,IAAmBJ,QAAQrD,SAASwD,CAAT,EAAYE,QAApB,IAAgCL,QAAQrD,SAASwD,CAAT,EAAYE,QAApB,EAA8BC,KAA9D,GAAsE,SAAzF;;AAEA,oBAAG3D,SAASwD,CAAT,EAAYI,eAAZ,CAA4B3E,MAA5B,GAAqC,CAAxC,EAA0C;;AAExC,uBAAI,IAAI4E,IAAE,CAAV,EAAaA,IAAE7D,SAASwD,CAAT,EAAYI,eAAZ,CAA4B3E,MAA3C,EAAmD4E,GAAnD,EAAuD;AACrD,wBAAI;AACF,0BAAMC,MAAMpB,iBAAiB1C,SAASwD,CAAT,EAAYI,eAAZ,CAA4BC,CAA5B,CAAjB,EAAiDzD,QAAjD,CAAZ;AACA,0BAAGJ,SAASwD,CAAT,EAAYI,eAAZ,CAA4BC,CAA5B,EAA+BE,WAA/B,CAA2CC,OAA3C,CAAmD,OAAnD,MAAgE,CAAC,CAApE,EAAsE;AACpEP,gCAAQ7B,SAAR,CAAkBqC,IAAlB,CAAuBH,GAAvB;AACD;AACF,qBALD,CAKE,OAAOjE,KAAP,EAAc;AACdxB,8BAAQC,GAAR,CAAY,gDAAZ;AACD;AACF;AACF;AACDuC,0BAAUb,QAAV,CAAmBiE,IAAnB,CAAwBR,OAAxB;AACD;AAEF;AACF7C,sBAAUL,QAAV,EAAoBM,SAApB;AACH;AACL,SApDD,MAoDQxC,QAAQC,GAAR,CAAY,qBAAZ;AACT;AACJ,KA5DD,MA4DOD,QAAQC,GAAR,CAAY,uBAAZ;AACR;AACF;;AAED,IAAM+E,UAAU,EAAhB;;AAEA,SAASa,WAAT,CAAqB5B,gBAArB,EAAsC;AACpC5C,gBAAO2C,QAAP,CAAgBpC,GAAhB,CAAoB,UAASJ,KAAT,EAAgBwC,QAAhB,EAA0B;AAC1C,QAAGxC,KAAH,EAAS;AACPxB,cAAQC,GAAR,CAAY,4BAAZ;AACAD,cAAQC,GAAR,CAAYuB,KAAZ;AACD,KAHD,MAGK;AACHuC,qBAAeC,QAAf,EAAyBC,gBAAzB;AACD;AACF,GAPH;AAQD;;AAEM,IAAM6B,0DAA0B,SAA1BA,sBAA0B,CAAC7B,gBAAD,EAAsB;;AAE3D5C,gBAAO0E,OAAP,CAAe,MAAf,EAAuBC,WAAvB,CAAmCpE,GAAnC,CAAuC,UAASJ,KAAT,EAAgBwE,WAAhB,EAA6B;AAClE,QAAIxE,KAAJ,EAAW;AACPxB,cAAQC,GAAR,CAAYuB,KAAZ;AACH,KAFD,MAGK;AACDwE,kBAAYC,OAAZ,CAAoB,kBAAU;AAC5BjB,gBAAQkB,OAAO5F,EAAf,IAAqB;AACnB4C,gBAAMgD,OAAOhD,IADM;AAEnBoC,iBAAOY,OAAOZ;AAFK,SAArB;AAID,OALD;AAMAO,kBAAY5B,gBAAZ;AACH;AACF,GAbD;AAcD,CAhBM;;kBAkBQ6B,sB","file":"getDataSync.js","sourcesContent":["import  Promise from 'promise'\nimport fs from 'fs'\nimport { client } from './index'\nimport PDFDocument from 'pdfkit'\nimport sp from 'synchronized-promise'\nimport axios from 'axios'\n\nconst {  performance } = require('perf_hooks');\n\nasync function getAllStoriesArray(projectId, offset=0, retrivedData=[], total=0){\n  console.log(` offset -> ${offset}`)\n  return new Promise(async function (resolve,reject) {\n    // client.project(projectId).stories.all(function (error,stories) {\n    //   if(error && (error.code === \"ETIMEDOUT\" || error.code === \"ECONNRESET\") && retries > 0){\n    //     getAllStoriesArray(projectId, retries-1)\n    //   }else if(!error){\n    //     resolve(stories)\n    //   }\n    //   else{\n    //     reject(error)\n    //   }\n    // })\n\n    const getData = async (id, ofset) => {\n        try {\n          const { data  } = await axios.get(`https://www.pivotaltracker.com/services/v5/projects/${id}/stories?limit=500&offset=${ofset}&envelope=true`, { headers: { 'X-TrackerToken': '4f8300952fe41dbf4063613ec2cd200a' } })\n          console.log(\" new data length\", data.data.length)\n          return data.data\n        } catch (error) {\n          return error\n        }\n    }\n\n     try{\n      const { data  } = await axios.get(`https://www.pivotaltracker.com/services/v5/projects/${projectId}/stories?limit=500&offset=${offset}&envelope=true`, { headers: { 'X-TrackerToken': '4f8300952fe41dbf4063613ec2cd200a' } })\n      retrivedData = [...retrivedData, ...data.data]\n      total = data.pagination.total\n\n        if(total !== retrivedData.length){\n          while(total !== retrivedData.length){\n            offset = offset + 500\n            // console.log(\"offset\", offset)\n            let newData = await getData(projectId, offset)\n            // console.log(\"Newww data\", newData.length)\n            retrivedData =[ ...retrivedData, ...newData]\n            console.log(` stories progress ${retrivedData.length}`)\n          }\n        }else{\n          console.log(`stories final count ${retrivedData.length}`)\n          resolve(retrivedData)\n        }\n\n     } catch(error){\n      reject(error)\n     }\n     resolve(retrivedData)\n\n\n\n    //   console.log('Total length')\n    //   retrivedData = [...retrivedData, ...data.data]\n    //  console.log(retrivedData.length)\n    //  offset = offset + 500\n    //  if(data.pagination.total >= offset ){\n    //   asyncFunc(offset,retrivedData )\n    //  }\n\n\n\n\n  })\n}\n\nfunction iterateOverAllStories(projectId, storyId, retries=5){\n  return new Promise((resolve,reject) => {\n    client.project(projectId).story(storyId).get(function(error, story) {\n      if(error && (error.code === \"ETIMEDOUT\" || error.code === \"ECONNRESET\") && retries > 0){\n        iterateOverAllStories(projectId, storyId, retries-1)\n      }else if(!error){\n        resolve(story)\n      }\n      else{\n        reject(error)\n      }\n  });\n  })\n}\n\nfunction getCommentsOfstory(projectId, storyId, retries=5){\n  return new Promise((resolve,reject) => {\n    client.project(projectId).story(storyId).comments.all(function(error, comments) {\n      if(error && (error.code === \"ETIMEDOUT\" || error.code === \"ECONNRESET\") && retries > 0){\n        getCommentsOfstory(projectId, storyId, retries-1)\n      }else if(!error){\n        resolve(comments)\n      }\n      else{\n        reject(error)\n      }\n  });\n  })\n}\n\nfunction donwloadFile(attachment, storyDir, retries=3) {\n  console.log(\"download started\")\n  let t0 = performance.now()\n  return new Promise((resolve,reject) => {\n    let filename = attachment.filename.trim().replace(/ /g,\"_\")\n    client.attachment(attachment.id).download(`${storyDir}/${filename}`, function(error) {\n      if (error && retries > 0) {\n        donwloadFile(attachment, storyDir,  retries-1)\n      } else if(!error) {\n          console.log(`Download success - ${storyDir}/${attachment.filename}`)\n          let t1 = performance.now()\n          console.log(`#### Download completed in ${(t1 - t0) / 1000} seconds`)\n          resolve(`${storyDir}/${filename}`)\n      } else{\n        reject(error)\n      }\n    });\n  })\n}\n\nfunction createPDF(filename, storyData){\n  const doc = new PDFDocument()\n  doc.pipe(fs.createWriteStream(filename))\n\n  doc\n  .fontSize(20)\n  .text(`Story -> ${storyData.story.id} Owner->${storyData.owner} Project ID -> ${storyData.story.projectId}`)\n\n  doc.moveDown();\n  doc\n  .fontSize(32)\n  .text(storyData.story.name)\n\n  doc.moveDown();\n  doc\n  .fontSize(25)\n  .text(`Description  -> ${storyData.story.description}`)\n\n  if(storyData.comments.length > 0){\n    doc\n      .addPage()\n      .fontSize(27)\n      .text(`Story -> ${storyData.story.id} -> Comments`)\n\n      for(let i=0; i<storyData.comments.length; i++ ){\n        doc.moveDown()\n        doc\n        .fontSize(25)\n        .text(`${storyData.comments[i].commentBy} -> ${storyData.comments[i].text} `)\n\n        if(storyData.comments[i].imagePath.length > 0){\n          for(let j=0; j<storyData.comments[i].imagePath.length; j++){\n           try {\n            doc.moveDown()\n            doc.image(storyData.comments[i].imagePath[j],{width: 400})\n            console.log(`story has image-${storyData.story.id}`)\n            console.log(storyData.comments[i].imagePath[j])\n           } catch (error) {\n            console.log(\"can not insert image\")\n            console.log(storyData.comments[i].imagePath[j])\n           }\n          }\n        }\n      }\n  }\n  doc.end();\n  console.log(`***** Process  ${ (100 * totalStoriesDone / totalStoriesAvailable).toFixed(2)}% completed ************** total stories ${totalStoriesAvailable}`)\n}\n\nlet totalStoriesAvailable = 0\nlet totalStoriesDone = 0\nfunction extractAllData(projects, remainingStories){\n  console.log(\"Total projects -> \",projects.length)\n\n  const getAllStoriesArraySync = sp(getAllStoriesArray)\n  const iterateOverAllStoriesSync = sp(iterateOverAllStories)\n  const getCommentsOfstorySync = sp(getCommentsOfstory)\n  const donwloadFileSync = sp(donwloadFile)\n\n  for(let i=0; i<projects.length; i++){\n    let pro = projects[i].id\n    if( pro===1600389){\n\n      const stories = getAllStoriesArraySync(projects[i].id)\n        console.log(`Project ${projects[i].id} has ${stories.length} stories`)\n        totalStoriesAvailable = totalStoriesAvailable + stories.length\n        for(let j=0; j<stories.length; j++){\n          if(!remainingStories.includes(stories[j].id)){\n\n            const story = iterateOverAllStoriesSync(projects[i].id, stories[j].id)\n\n                if(story && story.id !== null && story.id !== undefined){\n                  totalStoriesDone++\n\n                  const comments = getCommentsOfstorySync(projects[i].id, story.id)\n\n                   let storyData = {}\n                   storyData.story = story\n                   storyData.comments = []\n                   let baseDir = 'pivoteTrackerData'\n                   let projectDir = `${baseDir}/${projects[i].id}-${projects[i].name}`\n                   let storyDir = `${projectDir}/${story.id}`\n                   fs.mkdirSync(projectDir, { recursive: true })\n                   fs.mkdirSync(storyDir, { recursive: true })\n                   let filename = `${storyDir}/${story.id}-Story.pdf`\n                   let storyJson = `${storyDir}/${story.id}.json`\n\n                   fs.writeFileSync(storyJson, JSON.stringify(story))\n\n                   storyData[\"owner\"] = members[story.ownedById] ? members[story.ownedById].username : 'unknown'\n                    if(comments.length > 0){\n\n                      for(let k=0; k<comments.length; k++){\n                        let comment={}\n                        comment[\"text\"] = comments[k].text\n                        comment[\"storyId\"] = comments[k].storyId\n                        comment[\"imagePath\"] = []\n                        comment[\"commentBy\"] = members[comments[k].personId] ? members[comments[k].personId].username : \"unknown\"\n                        comment[\"email\"] = members[comments[k].personId] ? members[comments[k].personId].email : \"unknown\"\n\n                        if(comments[k].fileAttachments.length > 0){\n\n                          for(let l=0; l<comments[k].fileAttachments.length; l++){\n                            try {\n                              const res = donwloadFileSync(comments[k].fileAttachments[l], storyDir)\n                              if(comments[k].fileAttachments[l].contentType.indexOf('image') !== -1){\n                                comment.imagePath.push(res)\n                              }\n                            } catch (error) {\n                              console.log(\"fileAttachment download failed for some reason\")\n                            }\n                          }\n                        }\n                        storyData.comments.push(comment)\n                      }\n\n                    }\n                   createPDF(filename, storyData)\n               }\n          } else  console.log(\"story Id is missing\")\n        }\n    }else  console.log(\"Project Id is missing\")\n  }\n}\n\nconst members = {}\n\nfunction getprojects(remainingStories){\n  client.projects.all(function(error, projects) {\n      if(error){\n        console.log(\"error in all project fetch\")\n        console.log(error)\n      }else{\n        extractAllData(projects, remainingStories)\n      }\n    });\n}\n\nexport const getAllPivotTrackerData =  (remainingStories) => {\n\n  client.account(888851).memberships.all(function(error, memberships) {\n    if (error) {\n        console.log(error);\n    }\n    else {\n        memberships.forEach(member => {\n          members[member.id] = {\n            name: member.name,\n            email: member.email\n          }\n        })\n        getprojects(remainingStories)\n    }\n  });\n}\n\nexport default getAllPivotTrackerData\n"]}